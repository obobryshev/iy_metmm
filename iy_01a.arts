Arts2 {

INCLUDE "general/general.arts"
INCLUDE "general/continua.arts"
INCLUDE "general/agendas.arts"
INCLUDE "general/planet_earth.arts"

# Basic settings of simulation
    AtmosphereSet1D
    IndexSet( stokes_dim, 1 )
    StringSet( iy_unit, "PlanckBT" )


# monochromatic frequency grid
    #VectorLinSpace( f_grid, 22e9, 70e9, 1e7 )
    #VectorNLinSpace( f_grid, 500, 10e9, 230e9 )
    VectorNLinSpace( f_grid, 1125, 20e9, 200e9 )



# Common microwave sensor settings
    output_file_formatSetZippedAscii

    # 1. General
    # modify the maximum propagation step, from the default to 250 m :
    NumericSet( ppath_lmax, 250 )

    Touch(abs_nlte)
    # Agenda for scalar gas absorption calculation
    AgendaSet( abs_xsec_agenda ){
      Ignore(abs_nlte)
      abs_xsec_per_speciesInit
      abs_xsec_per_speciesAddPredefinedO2MPM2020
      abs_xsec_per_speciesAddConts
    }
    
    # Surface
    Copy( surface_rtprop_agenda,
    surface_rtprop_agenda__Specular_NoPol_ReflFix_SurfTFromt_surface )

    # (standard) emission calculation
    Copy( iy_main_agenda, iy_main_agenda__Emission )

    # cosmic background radiation
    Copy( iy_space_agenda, iy_space_agenda__CosmicBackground )

    # standard surface agenda (i.e., make use of surface_rtprop_agenda)
    Copy( iy_surface_agenda, iy_surface_agenda__UseSurfaceRtprop )

    # sensor-only path
    Copy( ppath_agenda, ppath_agenda__FollowSensorLosPath )

    # no refraction
    Copy( ppath_step_agenda, ppath_step_agenda__GeometricPath )

    # Set propmat_clearsky_agenda to use on-the-fly absorption
    #Copy( propmat_clearsky_agenda, propmat_clearsky_agenda__OnTheFly )
    AgendaSet( propmat_clearsky_agenda ){
      Ignore(rtp_mag)
      Ignore(rtp_los)
      propmat_clearskyInit
      propmat_clearskyAddXsecAgenda
      propmat_clearskyAddLines
      propmat_clearskyForceNegativeToZero
    }
    

    
# ====================================================================

# Spectroscopy
    abs_speciesSet( species=[ "H2O, H2O-SelfContCKDMT252, H2O-ForeignContCKDMT252",
                              "O2, O2-MPM2020",                              
                              "N2,  N2-CIAfunCKDMT252, N2-CIArotCKDMT252",
                              "O3" ] )

    ReadARTSCAT( abs_lines, "instruments/metmm/abs_lines_metmm.xml.gz" )
    abs_linesSetCutoff(option="ByLine", value=750e9)
    abs_linesSetNormalization(option="VVH")
    abs_lines_per_speciesCreateFromLines
    abs_lines_per_speciesSetCutoffForSpecies(option="ByLine", value=5e9, species_tag="O3")
#    WriteXML( "zascii", abs_lines, "instruments/metmm/abs_lines_metmm.xml.gz" )


# ====================================================================

# Set surface reflectivity
# Reflectivity = 0.4; emissivity = 0.6
    VectorSetConstant( surface_scalar_reflectivity, 1, 0.4 )

# Atmospheric profiles
    ReadXML( batch_atm_fields_compact, "testdata/garand_profiles.xml.gz" )

# add constant profiles for O2 and N2
    batch_atm_fields_compactAddConstant( name="abs_species-O2", value=0.2095 )
    batch_atm_fields_compactAddConstant( name="abs_species-N2", value=0.7808 )
# ====================================================================



# Setting the agenda for batch calculation 
# Garand profiles have 42 different. We will make RT calculations for all of them.
    ArrayOfMatrixCreate( out )
    #Tensor4Create( temp_tensor )
    ArrayOfMatrixCreate( temp_tensor )
    VectorCreate( temp_vector )
    MatrixCreate( temp_matrix )
    
    IndexSet(ybatch_index, 0)

  
# Extract the atmospheric profiles for this case:
    Extract(
    atm_fields_compact, 
    batch_atm_fields_compact, 
    ybatch_index
    )

# Split up *atm_fields_compact* to
# generate p_grid, t_field, z_field, vmr_field:
    AtmFieldsAndParticleBulkPropFieldFromCompact

# Optionally set Jacobian parameters.
    jacobianOff

# No scattering
    cloudboxOff
    
# No sensor
    sensorOff
    
# Definition of sensor position and LOS
# ---
    MatrixSetConstant( sensor_pos, 1, 1, 850e3 )
    MatrixSet( sensor_los, [ 180 ] )
    #VectorSet( rte_pos, [850e3] )
    #VectorSet( rte_los, [180] )
    #VectorSet( rte_pos2, [] )   

# get some surface properties from corresponding atmospheric fields
    Extract( z_surface, z_field, 0 )
    Extract( t_surface, t_field, 0 )

# Checks
    sensor_checkedCalc
    lbl_checkedCalc
    abs_xsec_agenda_checkedCalc
    propmat_clearsky_agenda_checkedCalc
    atmfields_checkedCalc
    atmgeom_checkedCalc
    cloudbox_checkedCalc

    yCalc

    
    
#=====================================================================
            #### Output ####
#=====================================================================
      

# Store results
    WriteXML( "ascii", f_grid, "Output/f_grid_y_2021-07-30_0700_fgrid.xml" )
    WriteXML( "ascii", y, "Output/y_O2-MPM2020_garand42_2021-07-30_0700_y.xml" )
    
}    
